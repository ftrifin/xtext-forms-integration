/*******************************************************************************
 * Copyright (c) 2009 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *******************************************************************************/
grammar org.eclipse.xtext.example.Domainmodel with org.eclipse.xtext.common.Terminals

generate domainmodel "http://www.example.xtext/Domainmodel"

DomainModel:
	(elements+=AbstractElement)*;

AbstractElement:
	PackageDeclaration | Type | Import;

Import:
	'import' importedNamespace=QualifiedNameWithWildCard;

PackageDeclaration:
	'package' name=QualifiedName '{'
		(elements+=AbstractElement)*
	'}';

Type:
	Entity | DataType;

DataType:
	'datatype' name=ID;

Entity:
	'entity' name=ID ('extends' superType=[Entity|QualifiedName])? '{'
		(features+=Feature)*
	'}';

Feature:
	StructuralFeature | Operation;

StructuralFeature:
	Attribute | Reference;

Attribute:
	name=ID ':' type=TypeRef;

Reference:
	'ref' name=ID ':' type=TypeRef ('opposite' opposite=[Reference])?;

Operation:
	(visibility=Visibility)? 'op' name=ID '(' (params+=Parameter (',' params+=Parameter)*)? ')' ':' type=TypeRef;

Parameter:
	name=ID type=TypeRef;

TypedElement:
	Feature | Parameter;

TypeRef:
	referenced=[Type|QualifiedName] (multi?='*')?;

enum Visibility:
	public="public" | private="private" | protected="protected";

QualifiedNameWithWildCard:
	QualifiedName '.*'?;

QualifiedName:
	ID ('.' ID)*;
