/*
 * generated by Xtext
 */
package org.eclipse.xtext.example.scoping;

import static org.eclipse.xtext.scoping.Scopes.*;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.example.domainmodel.DomainmodelPackage;
import org.eclipse.xtext.example.domainmodel.Entity;
import org.eclipse.xtext.example.domainmodel.Feature;
import org.eclipse.xtext.example.domainmodel.Reference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.impl.ImportedNamespaceAwareLocalScopeProvider;

import com.google.common.base.Predicate;
import com.google.common.collect.Iterables;

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#scoping on how and when to
 * use it
 * 
 */
public class DomainmodelScopeProvider extends ImportedNamespaceAwareLocalScopeProvider {
	
	@Override
	public IScope getScope(EObject context, EReference reference) {
		if (reference==DomainmodelPackage.Literals.REFERENCE__OPPOSITE) {
			return scope_Reference_opposite((Reference) context, reference);
		}
		return super.getScope(context, reference);
	}
	
	public IScope scope_Reference_opposite(final Reference ref, EReference eRef) {
		EList<Feature> features = ((Entity) ref.getType().getReferenced()).getFeatures();
		Iterable<Reference> references = Iterables.filter(features, Reference.class);
		references = Iterables.filter(references, new Predicate<Reference>(){
			public boolean apply(Reference input) {
				return ref.eContainer().equals(input.getType().getReferenced());
			}});
		return scopeFor(references);
	}

}
